import hashlib
from Crypto.Util.number import long_to_bytes
from Crypto.Util.number import bytes_to_long
from pwn import *

def cube_root_e(x, n):
    right=1
    while right**n<x:
        right*=2
    left=right//2
    
    while left < right:
        mid = (left +right)//2
        if mid > left and mid**n <x:
            left = mid
        elif right > mid and mid**n >x:
            right =mid
        else:
            return mid
    return mid+1

e= 79363099472625338631152944907349894760365893554033859562841260460061704486354948127606822578085711446937289987212374265940553428470350820124875321018260667557644458547849195953089934903576571715047932218373737377067446535138600438937849601625995581442410010240551015297626205507135816538793210624386787298751
n= 95947556661134327101108654956776984054272355247796519423896375866036517410077689703009014982423768270142924778952745891640961178338491228849406223092933323233815716066736331549978316481119752275498182639991361783216227829339784910221160330848963219300181081587848112448048224426936176614139919994998472009423
c= 39154597116481630093466335055350889216875595723525530179996885828447949487235067946022284625022220534732817246102235550060379404110363648980096745077781506534966221514729571036482310764362053499614649355506314218553296328862739034726697867908745908266980738015700262118615731816586691677237489258070953965515
p=7914334519287819382945288078192706099538141613032443401031630118729737829496960283558343558298936435613337053361503281907457116596158142755963922109005331
q=12123262723770776349296910187463303314616744369609404293941358435630631543810140574155385338266025291875292290504575671430163836235533229192205389675928533
phi=(p-1)*(q-1)
i=2
q=[]
r=[]
x=[]
y=[]
d=0
q.append(0)
q.append(0)

r.append(phi)
r.append(e)

x.append(0)
x.append(1)
y.append(1)
y.append(0)

while True:
    temp_q=r[i-2]//r[i-1]
    temp_r=r[i-2]%r[i-1]
    if temp_r==0:
        d=x[i-1]%phi
        break
    else:
        q.append(temp_q)
        r.append(temp_r)
        x.append(x[i-2]-q[i]*x[i-1])
        y.append(y[i-2]-q[i]*y[i-1])
        i+=1

print(d)

print(long_to_bytes(pow(c, d, n)))
